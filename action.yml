name: 'CrowdStrike FCS CLI GitHub Action'
description: 'Run FCS IaC or Image scan'
branding:
  icon: 'shield'
  color: 'red'
inputs:
  falcon_client_id:
    description: 'CrowdStrike API Client ID for authentication'
    required: true
  falcon_region:
    description: 'CrowdStrike API region. Allowed values are us-1, us-2, eu-1, us-gov-1, us-gov-2'
    required: true
    default: us-1
  version:
    description: 'FCS CLI version to use'
    required: false
  scan_type:
    description: 'Type of scan to perform: iac or image'
    required: false
    default: 'iac'
  categories:
    description: 'Include results for the specified categories'
    required: false
  config:
    description: 'Path to the scan configuration file'
    required: false
  disable_secrets_scan:
    description: 'Disable scanning of secrets and passwords in target files'
    required: false
    default: 'false'
  exclude_categories:
    description: 'Exclude results for the specified categories, accepts a comma-separated list'
    required: false
  exclude_paths:
    description: "Exclude paths from scan, accepts a comma-separated list (e.g. './sample-dir-to-omit/*,sample-file.tf')"
    required: false
  exclude_platforms:
    description: 'Exclude results for the specified platforms, accepts a comma-separated list'
    required: false
  exclude_severities:
    description: 'Exclude results for the specified severities, accepts a comma-separated list'
    required: false
  fail_on:
    description: 'Comma-separated list of which kind of results should return an exit code different from 0'
    required: false
  output_path:
    description: 'Path to save the scan results'
    required: false
    default: "./"
  path:
    description: 'Path to local file, local directory or git repo to scan (e.g. ./my-local-dir, git::<git repo>, sample-file.tf)'
    required: false
  platforms:
    description: 'Include results for the specified platforms, accepts a comma-separated list (e.g Ansible,CloudFormation)'
    required: false
  policy_rule:
    description: 'IaC cloud scanning policy-rule. Use "local" for local rules, "default-iac-alert-rule" for cloud-based rules'
    required: false
    default: 'local'
  project_owners:
    description: 'Comma-separated list of project owners to notify (max 5)'
    required: false
  report_formats:
    description: 'Comma-separated list of formats in which reports are to be written (e.g. json,sarif)'
    required: false
  severities:
    description: 'Include results for the specified severities, accepts a comma-separated list (e.g. high,medium)'
    required: false
  timeout:
    description: 'Timeout for the scan in seconds'
    required: false
  upload_results:
    description: 'Upload scan results to the CrowdStrike Falcon Console'
    required: false
    default: 'false'
  # Image scanning specific inputs
  image:
    description: 'Container image to scan (e.g., nginx:latest, docker://image:tag)'
    required: false
  socket:
    description: 'Custom socket path for container engine (e.g., unix:///var/run/docker.sock)'
    required: false
  platform:
    description: 'Target platform for multi-platform images in OS/ARCH[/VARIANT] format (e.g., linux/amd64)'
    required: false
  vulnerability_only:
    description: 'Image scan for vulnerabilities only'
    required: false
    default: 'false'
  sbom_only:
    description: 'Only generate Image SBOM in CycloneDX (json) format'
    required: false
    default: 'false'
  minimum_score:
    description: 'Only show vulnerabilities with CVSS score at or above this threshold (0.0-10.0)'
    required: false
  minimum_severity:
    description: 'Only show vulnerabilities with this severity or higher (low, medium, high, critical)'
    required: false
  minimum_exprt:
    description: 'Only show vulnerabilities with this ExPRT rating or higher (low, medium, high, critical)'
    required: false
  exclude_vulnerabilities:
    description: 'Comma-separated list of vulnerability IDs to exclude'
    required: false
  vuln_fixable_only:
    description: 'Exclude vulnerabilities without a fix'
    required: false
    default: 'false'
  report_sort_by:
    description: 'Sort report by vulnerability, ExPRT rating, severity or score in ascending or descending order'
    required: false
  show_full_description:
    description: 'Show full vulnerability descriptions without truncation'
    required: false
    default: 'false'
  show_full_detection_details:
    description: 'Show full detection details without truncation'
    required: false
    default: 'false'
  minimum_detection_severity:
    description: 'Only show detections with this severity or higher (low, medium, high, critical)'
    required: false
  no_color:
    description: 'Disable colored output for severity levels and ExPRT ratings'
    required: false
    default: 'false'
  temp_dir:
    description: 'Custom directory for temporary files'
    required: false
outputs:
  exit-code:
    description: 'Exit code of the FCS CLI tool'
    value: ${{ steps.fcs-scan.outputs.exit-code }}

runs:
  using: "composite"
  steps:
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Install Python dependencies
      run: pip install -r $GITHUB_ACTION_PATH/requirements.txt
      shell: bash

    - name: Download FCS CLI using falconpy
      id: fcs-download
      run: python $GITHUB_ACTION_PATH/fcs_download.py
      shell: bash
      env:
        INPUT_FALCON_CLIENT_ID: ${{ inputs.falcon_client_id }}
        INPUT_FALCON_REGION: ${{ inputs.falcon_region }}
        INPUT_VERSION: ${{ inputs.version }}

    - name: Run FCS CLI tool
      id: fcs-scan
      run: $GITHUB_ACTION_PATH/fcs-scan.sh
      shell: bash
      env:
        OUTPUT_FCS_BIN: ${{ steps.fcs-download.outputs.FCS_BIN }}
        INPUT_FALCON_CLIENT_ID: ${{ inputs.falcon_client_id }}
        INPUT_FALCON_REGION: ${{ inputs.falcon_region }}
        INPUT_SCAN_TYPE: ${{ inputs.scan_type }}
        INPUT_CATEGORIES: ${{ inputs.categories }}
        INPUT_CONFIG: ${{ inputs.config }}
        INPUT_DISABLE_SECRETS_SCAN: ${{ inputs.disable_secrets_scan }}
        INPUT_EXCLUDE_CATEGORIES: ${{ inputs.exclude_categories }}
        INPUT_EXCLUDE_PATHS: ${{ inputs.exclude_paths }}
        INPUT_EXCLUDE_PLATFORMS: ${{ inputs.exclude_platforms }}
        INPUT_EXCLUDE_SEVERITIES: ${{ inputs.exclude_severities }}
        INPUT_FAIL_ON: ${{ inputs.fail_on }}
        INPUT_OUTPUT_PATH: ${{ inputs.output_path }}
        INPUT_PATH: ${{ inputs.path }}
        INPUT_PLATFORMS: ${{ inputs.platforms }}
        INPUT_POLICY_RULE: ${{ inputs.policy_rule }}
        INPUT_PROJECT_OWNERS: ${{ inputs.project_owners }}
        INPUT_REPORT_FORMATS: ${{ inputs.report_formats }}
        INPUT_SEVERITIES: ${{ inputs.severities }}
        INPUT_TIMEOUT: ${{ inputs.timeout }}
        INPUT_UPLOAD_RESULTS: ${{ inputs.upload_results }}
        # Image scanning environment variables
        INPUT_IMAGE: ${{ inputs.image }}
        INPUT_SOCKET: ${{ inputs.socket }}
        INPUT_PLATFORM: ${{ inputs.platform }}
        INPUT_VULNERABILITY_ONLY: ${{ inputs.vulnerability_only }}
        INPUT_SBOM_ONLY: ${{ inputs.sbom_only }}
        INPUT_MINIMUM_SCORE: ${{ inputs.minimum_score }}
        INPUT_MINIMUM_SEVERITY: ${{ inputs.minimum_severity }}
        INPUT_MINIMUM_EXPRT: ${{ inputs.minimum_exprt }}
        INPUT_EXCLUDE_VULNERABILITIES: ${{ inputs.exclude_vulnerabilities }}
        INPUT_VULN_FIXABLE_ONLY: ${{ inputs.vuln_fixable_only }}
        INPUT_REPORT_SORT_BY: ${{ inputs.report_sort_by }}
        INPUT_SHOW_FULL_DESCRIPTION: ${{ inputs.show_full_description }}
        INPUT_SHOW_FULL_DETECTION_DETAILS: ${{ inputs.show_full_detection_details }}
        INPUT_MINIMUM_DETECTION_SEVERITY: ${{ inputs.minimum_detection_severity }}
        INPUT_NO_COLOR: ${{ inputs.no_color }}
        INPUT_TEMP_DIR: ${{ inputs.temp_dir }}
